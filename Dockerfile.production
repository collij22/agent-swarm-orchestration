# Multi-stage production build for Agent Swarm System
# Stage 1: Python base with dependencies
FROM python:3.11-slim as python-base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_VERSION=1.7.1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry==$POETRY_VERSION
RUN poetry config virtualenvs.create false

# Stage 2: Dependencies builder
FROM python-base as dependencies

WORKDIR /app

# Copy dependency files
COPY pyproject.toml poetry.lock* requirements.txt* ./

# Install dependencies
RUN if [ -f "pyproject.toml" ]; then \
        poetry install --no-dev --no-interaction --no-ansi; \
    elif [ -f "requirements.txt" ]; then \
        pip install --no-cache-dir -r requirements.txt; \
    fi

# Stage 3: Application
FROM python:3.11-slim as production

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    MODE=production \
    MONITORING=enabled \
    LOG_LEVEL=INFO

WORKDIR /app

# Copy Python dependencies from builder
COPY --from=dependencies /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=dependencies /usr/local/bin /usr/local/bin

# Copy application code
COPY --chown=appuser:appuser . .

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/checkpoints /app/sessions && \
    chown -R appuser:appuser /app

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/health')" || exit 1

# Switch to non-root user
USER appuser

# Expose ports
EXPOSE 8000 9090 5173

# Default command
CMD ["python", "orchestrate_v2.py", "--mode=production", "--monitoring=enabled"]