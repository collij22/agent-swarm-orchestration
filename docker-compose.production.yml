version: '3.8'

services:
  # Main orchestrator service
  orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.production
    image: agent-swarm:latest
    container_name: agent-swarm-orchestrator
    environment:
      - MODE=production
      - MONITORING=enabled
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://swarm:swarm_pass@postgres:5432/swarm_db
      - PROMETHEUS_ENABLED=true
      - GRAFANA_URL=http://grafana:3000
      - API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MAX_CONCURRENT_AGENTS=3
      - CHECKPOINT_INTERVAL=300
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}
    ports:
      - "8000:8000"  # API server
      - "9090:9090"  # Prometheus metrics
      - "5173:5173"  # Web dashboard
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./checkpoints:/app/checkpoints
      - ./sessions:/app/sessions
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - swarm-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: agent-swarm-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - swarm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: agent-swarm-postgres
    environment:
      - POSTGRES_DB=swarm_db
      - POSTGRES_USER=swarm
      - POSTGRES_PASSWORD=swarm_pass
      - POSTGRES_INIT_DB_ARGS=--encoding=UTF-8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - swarm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U swarm -d swarm_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:10-alpine
    container_name: agent-swarm-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource,postgres-datasource
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - swarm-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: agent-swarm-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped
    networks:
      - swarm-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: agent-swarm-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - orchestrator
      - grafana
    restart: unless-stopped
    networks:
      - swarm-network

networks:
  swarm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local