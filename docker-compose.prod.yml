version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: taskmanager-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - taskmanager-network

  backend:
    image: ghcr.io/${GITHUB_REPOSITORY:-taskmanager}:latest
    container_name: taskmanager-backend
    environment:
      - DATABASE_URL=sqlite:///app/data/taskmanager.db
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
    volumes:
      - taskmanager-data:/app/data
      - ./logs/backend:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - taskmanager-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: taskmanager-frontend
    environment:
      - REACT_APP_API_URL=${API_URL:-http://localhost:8000/api/v1}
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - taskmanager-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  prometheus:
    image: prom/prometheus:latest
    container_name: taskmanager-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - taskmanager-network

  grafana:
    image: grafana/grafana:latest
    container_name: taskmanager-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3001}
    restart: unless-stopped
    networks:
      - taskmanager-network

  loki:
    image: grafana/loki:latest
    container_name: taskmanager-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - taskmanager-network

  promtail:
    image: grafana/promtail:latest
    container_name: taskmanager-promtail
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - taskmanager-network

  redis:
    image: redis:alpine
    container_name: taskmanager-redis
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    restart: unless-stopped
    networks:
      - taskmanager-network

  backup:
    image: alpine:latest
    container_name: taskmanager-backup
    volumes:
      - taskmanager-data:/data
      - ./backups:/backups
    command: |
      sh -c "
        apk add --no-cache sqlite
        while true; do
          timestamp=$$(date +%Y%m%d_%H%M%S)
          sqlite3 /data/taskmanager.db '.backup /backups/taskmanager_$$timestamp.db'
          find /backups -name '*.db' -mtime +7 -delete
          sleep 86400
        done
      "
    restart: unless-stopped
    networks:
      - taskmanager-network

volumes:
  taskmanager-data:
  prometheus-data:
  grafana-data:
  loki-data:
  redis-data:

networks:
  taskmanager-network:
    driver: bridge