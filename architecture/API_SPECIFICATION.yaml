openapi: 3.0.3
info:
  title: TaskManager API
  description: AI-Enhanced Task Management API with smart categorization and priority scoring
  version: 1.0.0
  contact:
    name: API Support
    email: support@taskmanager.api
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api/v1
    description: Development server
  - url: https://api.taskmanager.com/api/v1
    description: Production server

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists

  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      summary: Refresh access token
      tags:
        - Authentication
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /tasks:
    get:
      summary: List all tasks for authenticated user
      tags:
        - Tasks
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/TaskStatus'
        - name: category_id
          in: query
          schema:
            type: string
            format: uuid
        - name: priority
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create a new task
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /tasks/{task_id}:
    get:
      summary: Get a specific task
      tags:
        - Tasks
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update a task
      tags:
        - Tasks
      parameters:
        - $ref: '#/components/parameters/TaskId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete a task
      tags:
        - Tasks
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '204':
          description: Task deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /tasks/{task_id}/categorize:
    post:
      summary: AI-powered task categorization
      tags:
        - Tasks
        - AI
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '200':
          description: Categorization result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategorizationResult'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          description: AI service unavailable

  /tasks/{task_id}/prioritize:
    post:
      summary: AI-powered priority scoring
      tags:
        - Tasks
        - AI
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '200':
          description: Priority scoring result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriorityResult'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          description: AI service unavailable

  /categories:
    get:
      summary: List all categories
      tags:
        - Categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

    post:
      summary: Create a new category
      tags:
        - Categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    TaskId:
      name: task_id
      in: path
      required: true
      schema:
        type: string
        format: uuid

  schemas:
    UserRegister:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8

    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          default: bearer
        expires_in:
          type: integer
          default: 3600

    TaskStatus:
      type: string
      enum:
        - todo
        - in_progress
        - done

    TaskCreate:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        status:
          $ref: '#/components/schemas/TaskStatus'
          default: todo

    TaskUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        status:
          $ref: '#/components/schemas/TaskStatus'
        category_id:
          type: string
          format: uuid
        priority:
          type: integer
          minimum: 1
          maximum: 5

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/TaskStatus'
        category:
          $ref: '#/components/schemas/Category'
        priority:
          type: integer
          minimum: 1
          maximum: 5
        ai_processed:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user_id:
          type: string
          format: uuid

    TaskListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

    CategoryCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        description:
          type: string
          maxLength: 200
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        color:
          type: string
        created_at:
          type: string
          format: date-time

    CategorizationResult:
      type: object
      properties:
        task_id:
          type: string
          format: uuid
        category:
          type: string
        confidence:
          type: number
          minimum: 0
          maximum: 1

    PriorityResult:
      type: object
      properties:
        task_id:
          type: string
          format: uuid
        priority:
          type: integer
          minimum: 1
          maximum: 5
        reasoning:
          type: string

    Error:
      type: object
      properties:
        detail:
          type: string
        status_code:
          type: integer
        timestamp:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    RateLimitExceeded:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
        X-RateLimit-Remaining:
          schema:
            type: integer
        X-RateLimit-Reset:
          schema:
            type: integer