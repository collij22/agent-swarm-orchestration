version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: quickshop_postgres
    environment:
      POSTGRES_DB: quickshop
      POSTGRES_USER: quickshop_user
      POSTGRES_PASSWORD: quickshop_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./backend/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quickshop_user -d quickshop"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - quickshop_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: quickshop_redis
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - quickshop_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: quickshop_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://quickshop_user:quickshop_pass@postgres:5432/quickshop
      - REDIS_URL=redis://:redis_password@redis:6379
      - SECRET_KEY=dev-secret-key-change-in-production-please-use-strong-key
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - STRIPE_SECRET_KEY=sk_test_placeholder
      - STRIPE_WEBHOOK_SECRET=whsec_placeholder
      - SENDGRID_API_KEY=SG.placeholder
      - FROM_EMAIL=noreply@quickshop.com
      - AWS_ACCESS_KEY_ID=placeholder
      - AWS_SECRET_ACCESS_KEY=placeholder
      - AWS_S3_BUCKET=quickshop-images
      - AWS_REGION=us-east-1
      - ENVIRONMENT=development
      - DEBUG=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - quickshop_network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: quickshop_frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_STRIPE_PUBLISHABLE_KEY=pk_test_placeholder
      - VITE_APP_NAME=QuickShop MVP
      - VITE_APP_VERSION=1.0.0
      - NODE_ENV=development
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_dist:/app/dist
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - quickshop_network

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: quickshop_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - quickshop_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  frontend_dist:
    driver: local
  nginx_logs:
    driver: local

networks:
  quickshop_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16